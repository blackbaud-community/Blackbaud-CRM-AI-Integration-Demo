Option Strict Off

Namespace USR_USP_CONSTITUENTPHOTOANALYSISPROCESS_GETPARAMETERS

    '*****************************************************************
    'Generated by SPCodeGen Â© 2003 Blackbaud CoreTech
    '*****************************************************************
#Region "Parameter Specification"
    'Name                         Type                Size        Direction
    '@RETURN_VALUE                int                             Return value
    '@ID                          uniqueidentifier                In
#End Region

    'SP TYPE: Stored Procedure - single resultset


    <System.CodeDom.Compiler.GeneratedCodeAttribute("SPCodeGen", "2.0.0.0")>
    <System.Serializable()> Public NotInheritable Class ResultRow
        Inherits SPResultSetDataRow

        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
        Public Enum ColumnList
            [IDSETREGISTERID]
        End Enum

        Private Const MAX_COLUMN_INDEX As Integer = 0

        Public Sub New()
            Me.New(True)
        End Sub

        Friend Sub New(ByVal initDBNull As Boolean)
            MyBase.New(MAX_COLUMN_INDEX, initDBNull)
        End Sub

        Public Sub New(ByVal rdr As System.Data.SqlClient.SqlDataReader)
            ReDim _data(MAX_COLUMN_INDEX)
            rdr.GetValues(_data)
        End Sub

        Public ReadOnly Property ColumnIsDBNull(ByVal col As ColumnList) As Boolean
            Get
                Return ObjIsNull(_data(col))
            End Get
        End Property

        <System.Xml.Serialization.XmlAttribute()> Overloads Property [IDSETREGISTERID]() As System.Guid
            Get
                Dim o As Object = _data(ColumnList.IDSETREGISTERID)
                If (o Is DBNull.Value) Then Return System.Guid.Empty
                Return DirectCast(o, System.Guid)
            End Get

            Set(ByVal Value As System.Guid)
                _data(ColumnList.IDSETREGISTERID) = Value
            End Set
        End Property

        Overloads ReadOnly Property [IDSETREGISTERID](ByVal valueIfNull As System.Guid) As System.Guid
            Get
                Return MyBase.GetValueIfNull(ColumnList.IDSETREGISTERID, valueIfNull)
            End Get
        End Property


    End Class
    <System.CodeDom.Compiler.GeneratedCodeAttribute("SPCodeGen", "2.0.0.0")>
    Public Module WrapperRoutines

        Public Function CreateSQLCommand(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid), Optional ByVal timeout As Integer = 0) As System.Data.SqlClient.SqlCommand

            Dim cmd As System.Data.SqlClient.SqlCommand = conn.CreateCommand
            If timeout = 0 Then
                cmd.CommandTimeout = Config.DefaultResultSetTimeout
            Else
                cmd.CommandTimeout = timeout
            End If
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "dbo.USR_USP_CONSTITUENTPHOTOANALYSISPROCESS_GETPARAMETERS"

            Dim p As System.Data.SqlClient.SqlParameter

            '@RETURN_VALUE
            p = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int)
            p.Direction = ParameterDirection.ReturnValue
            p.Value = 0


            '@ID
            If [ID].HasValue Then
                cmd.Parameters.AddWithValue("@ID", [ID].Value)
            Else
                cmd.Parameters.AddWithValue("@ID", System.DBNull.Value).SqlDbType = SqlDbType.uniqueidentifier
            End If

            Return cmd
        End Function

        Public Function ExecuteRow(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid)) As ResultRow
            Return ExecuteRow(conn, [ID], 0, 0, Nothing)
        End Function

        Public Function ExecuteRow(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid), ByRef returnIntValue As Integer) As ResultRow
            Return ExecuteRow(conn, [ID], returnIntValue, 0, Nothing)
        End Function

        Public Function ExecuteRow(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid), ByRef returnIntValue As Integer, ByVal timeout As Integer) As ResultRow
            Return ExecuteRow(conn, [ID], returnIntValue, timeout, Nothing)
        End Function

        Public Function ExecuteRow(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid), Optional ByRef returnIntValue As Integer = 0, Optional ByVal timeout As Integer = 0, Optional ByVal tran As SQLClient.SQLTransaction = Nothing) As ResultRow

            Dim cmd As System.Data.SqlClient.SqlCommand = CreateSQLCommand(conn, [ID], timeout)

            If tran IsNot Nothing Then
                cmd.Transaction = tran
            End If

            Dim rdr As System.Data.SqlClient.SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleRow)

            If rdr.Read Then
                ExecuteRow = New ResultRow(rdr)
            Else
                ExecuteRow = Nothing
            End If

            rdr.Close()

            returnIntValue = DirectCast(cmd.Parameters.Item(0).Value, Integer)



        End Function

        Public Function ExecuteSP(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid)) As ResultRow()
            Return ExecuteSP(conn, [ID], 0, 0, Nothing)
        End Function

        Public Function ExecuteSP(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid), ByRef returnIntValue As Integer) As ResultRow()
            Return ExecuteSP(conn, [ID], returnIntValue, 0, Nothing)
        End Function

        Public Function ExecuteSP(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid), ByRef returnIntValue As Integer, ByVal timeout As Integer) As ResultRow()
            Return ExecuteSP(conn, [ID], returnIntValue, timeout, Nothing)
        End Function

        Public Function ExecuteSP(ByVal conn As System.Data.SqlClient.SqlConnection, ByVal [ID] As Nullable(Of System.Guid), Optional ByRef returnIntValue As Integer = 0, Optional ByVal timeout As Integer = 0, Optional ByVal tran As SQLClient.SQLTransaction = Nothing) As ResultRow()

            Dim cmd As System.Data.SqlClient.SqlCommand
            cmd = CreateSQLCommand(conn, [ID], timeout)
            If tran IsNot Nothing Then
                cmd.Transaction = tran
            End If
            Dim rdr As System.Data.SqlClient.SqlDataReader
            rdr = cmd.ExecuteReader()

            Dim list As New System.Collections.Generic.List(Of ResultRow)


            Using rdr

                Do While rdr.Read
                    list.Add(New ResultRow(rdr))
                Loop

                rdr.Close()

            End Using


            returnIntValue = DirectCast(cmd.Parameters.Item(0).Value, Integer)

            Dim resultRows() As ResultRow = list.ToArray()





            Return resultRows
        End Function



        'Overload step 2
        'ParmCount=1

        Public Function CreateSQLCommand(ByVal conn As System.Data.SqlClient.SqlConnection, Optional ByVal timeout As Integer = 0) As System.Data.SqlClient.SqlCommand

            Dim cmd As System.Data.SqlClient.SqlCommand = conn.CreateCommand
            If timeout = 0 Then
                cmd.CommandTimeout = Config.DefaultResultSetTimeout
            Else
                cmd.CommandTimeout = timeout
            End If
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "dbo.USR_USP_CONSTITUENTPHOTOANALYSISPROCESS_GETPARAMETERS"

            Dim p As System.Data.SqlClient.SqlParameter

            '@RETURN_VALUE
            p = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int)
            p.Direction = ParameterDirection.ReturnValue
            p.Value = 0

            Return cmd
        End Function

        Public Function ExecuteRow(ByVal conn As System.Data.SqlClient.SqlConnection) As ResultRow
            Return ExecuteRow(conn, 0, 0, Nothing)
        End Function

        Public Function ExecuteRow(ByVal conn As System.Data.SqlClient.SqlConnection, ByRef returnIntValue As Integer) As ResultRow
            Return ExecuteRow(conn, returnIntValue, 0, Nothing)
        End Function

        Public Function ExecuteRow(ByVal conn As System.Data.SqlClient.SqlConnection, ByRef returnIntValue As Integer, ByVal timeout As Integer) As ResultRow
            Return ExecuteRow(conn, returnIntValue, timeout, Nothing)
        End Function

        Public Function ExecuteRow(ByVal conn As System.Data.SqlClient.SqlConnection, Optional ByRef returnIntValue As Integer = 0, Optional ByVal timeout As Integer = 0, Optional ByVal tran As SQLClient.SQLTransaction = Nothing) As ResultRow

            Dim cmd As System.Data.SqlClient.SqlCommand = CreateSQLCommand(conn, timeout)

            If tran IsNot Nothing Then
                cmd.Transaction = tran
            End If

            Dim rdr As System.Data.SqlClient.SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleRow)

            If rdr.Read Then
                ExecuteRow = New ResultRow(rdr)
            Else
                ExecuteRow = Nothing
            End If

            rdr.Close()

            returnIntValue = DirectCast(cmd.Parameters.Item(0).Value, Integer)



        End Function

        Public Function ExecuteSP(ByVal conn As System.Data.SqlClient.SqlConnection) As ResultRow()
            Return ExecuteSP(conn, 0, 0, Nothing)
        End Function

        Public Function ExecuteSP(ByVal conn As System.Data.SqlClient.SqlConnection, ByRef returnIntValue As Integer) As ResultRow()
            Return ExecuteSP(conn, returnIntValue, 0, Nothing)
        End Function

        Public Function ExecuteSP(ByVal conn As System.Data.SqlClient.SqlConnection, ByRef returnIntValue As Integer, ByVal timeout As Integer) As ResultRow()
            Return ExecuteSP(conn, returnIntValue, timeout, Nothing)
        End Function

        Public Function ExecuteSP(ByVal conn As System.Data.SqlClient.SqlConnection, Optional ByRef returnIntValue As Integer = 0, Optional ByVal timeout As Integer = 0, Optional ByVal tran As SQLClient.SQLTransaction = Nothing) As ResultRow()

            Dim cmd As System.Data.SqlClient.SqlCommand
            cmd = CreateSQLCommand(conn, timeout)
            If tran IsNot Nothing Then
                cmd.Transaction = tran
            End If
            Dim rdr As System.Data.SqlClient.SqlDataReader
            rdr = cmd.ExecuteReader()

            Dim list As New System.Collections.Generic.List(Of ResultRow)


            Using rdr

                Do While rdr.Read
                    list.Add(New ResultRow(rdr))
                Loop

                rdr.Close()

            End Using


            returnIntValue = DirectCast(cmd.Parameters.Item(0).Value, Integer)

            Dim resultRows() As ResultRow = list.ToArray()





            Return resultRows
        End Function


    End Module
End Namespace

